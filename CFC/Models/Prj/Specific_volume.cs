//------------------------------------------------------------------------------
// <auto-generated>
//     這個程式碼是由範本產生。
//
//     對這個檔案進行手動變更可能導致您的應用程式產生未預期的行為。
//     如果重新產生程式碼，將會覆寫對這個檔案的手動變更。
// </auto-generated>
//------------------------------------------------------------------------------

namespace CFC.Models.Prj
{
    using DouHelper;
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;

    /// <summary>
    /// 冷媒種類
    /// </summary>
    public partial class Specific_volume
    {
        /*
             這邊的畫面是要給使用者自行新增
             因此 單一輸入時，可能會有多筆數據
        
            1. 輸入編號(ID) 是對應輸入時的一對多
            2. 資料行(RowID) 用來對應目前輸入到第幾行
            3. 逸散ID (EscapeID) 用來對應係數
         */


        /// <summary>
        /// 對應到UserInput的ID，對應用
        /// </summary>
        [Key]
        [Column(Order = 0)]
        [Display(Name = "使用者輸入編號")]
        public int Id { get; set; }

        /// <summary>
        /// 資料行的ID
        /// </summary>
        [Key]
        [Column(Order = 1)]
        [Display(Name = "資料行的ID")]
        public int RowId { get; set; }

        /// <summary>
        /// 特定製程ID
        /// </summary>
        [Display(Name = "特定製程原料ID")]
        public string CreateId { get; set; }

        /// <summary>
        /// 特定製程分類
        /// </summary>
        [Display(Name = "特定製程分類ID")]
        public string CreateType { get; set; }

        /// <summary>
        /// 使用量
        /// </summary>
        [Display(Name = "使用量")]
        public double UseVolume { get; set; }

        /// <summary>
        /// 特定製程名稱，僅在自行輸入時才會用到
        /// </summary>
        [Display(Name = "特定製程名稱")]
        public string OtherName { get; set; }

        /// <summary>
        /// 特定製程係數，僅在自行輸入時才會用到
        /// </summary>
        [Display(Name = "特定製程係數")]
        public decimal OtherCoe { get; set; }

        /// <summary>
        /// 特定製程分類，僅在自行輸入時才會用到
        /// </summary>
        [Display(Name = "特定製程分類")]
        public String OtherType { get; set; }

        static object lockGetAllDatas = new object();
        public static IEnumerable<Specific_volume> GetAllDatas(int cachetimer = 0)
        {
            if (cachetimer == 0) cachetimer = Constant.cacheTime;

            string key = "CFC.Models.Prj.Specific_volume";
            var allData = DouHelper.Misc.GetCache<IEnumerable<Specific_volume>>(cachetimer, key);
            lock (lockGetAllDatas)
            {
                if (allData == null)
                {
                    Dou.Models.DB.IModelEntity<Specific_volume> modle = new Dou.Models.DB.ModelEntity<Specific_volume>(new DouModelContext());
                    allData = modle.GetAll().OrderByDescending(a => a.RowId).ToArray();

                    DouHelper.Misc.AddCache(allData, key);
                }
            }

            return allData;
        }

        public static void ResetGetAllDatas()
        {
            string key = "CFC.Models.Prj.Specific_volume";
            Misc.ClearCache(key);
        }
    }
}
